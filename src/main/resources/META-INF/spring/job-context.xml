<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:batch="http://www.springframework.org/schema/batch"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/batch
		http://www.springframework.org/schema/batch/spring-batch.xsd
		">

	<batch:job id="job1">
		<batch:step id="OutputData" next="UpdateTable">
			<batch:tasklet>
				<batch:chunk reader="itemReader" processor="itemProcessor" writer="multiItemWriter"
								commit-interval="4" skip-limit="2">
					<batch:skippable-exception-classes>
						<batch:include class="jp.co.sysevo.exception.BatchSkipException"/>
					</batch:skippable-exception-classes>
					<batch:streams>
						<batch:stream ref="globalWriter" />
						<batch:stream ref="japanWriter" />
						<batch:stream ref="resultWriter" />
					</batch:streams>
				</batch:chunk>
			</batch:tasklet>
		</batch:step>
		<batch:step id="UpdateTable">
			<batch:tasklet>
				<batch:chunk reader="resultReader" writer="updateWriter" 
					commit-interval="1" chunk-completion-policy=""/>
			</batch:tasklet>
		</batch:step>
	</batch:job>
	
	<bean id="itemReader" class="org.mybatis.spring.batch.MyBatisPagingItemReader" scope="step">
		<property name="sqlSessionFactory" ref="sqlSessionFactory" />
		<property name="queryId" value="findInptData" />
		<property name="pageSize" value="100"/>
		<property name="parameterValues">
			<map>
				<entry key="name" value="#{jobParameters['name']}" />
			</map>
		</property>
	</bean>

	<bean id="multiItemWriter" class="org.springframework.batch.item.support.CompositeItemWriter">
		<property name="delegates">
			<list>
				<ref bean="globalWriter" />
				<ref bean="japanWriter" />
				<ref bean="resultWriter" />
			</list>
		</property>
	</bean>

	<bean id="globalWriter" class="org.springframework.batch.item.file.FlatFileItemWriter" scope="step">
		<property name="resource" value="file:data/RCV_ECAL.TXT" />
		<property name="lineAggregator">
			<bean class="org.springframework.batch.item.file.transform.DelimitedLineAggregator">
				<property name="delimiter" value=',' />
				<property name="fieldExtractor">
					<bean class="org.springframework.batch.item.file.transform.BeanWrapperFieldExtractor">
						<property name="names" value="id, name, des, age" />
					</bean>
				</property>
			</bean>
		</property>
	</bean>

	<bean id="japanWriter" class="org.springframework.batch.item.file.FlatFileItemWriter" scope="step">
		<property name="resource" value="file:data/RCV_ECAL_MJP.TXT" />
		<property name="lineAggregator">
			<bean class="org.springframework.batch.item.file.transform.DelimitedLineAggregator">
				<property name="delimiter" value=',' />
				<property name="fieldExtractor">
					<bean class="org.springframework.batch.item.file.transform.BeanWrapperFieldExtractor">
						<property name="names" value="id, name, sendFlg, desJp" />
					</bean>
				</property>
			</bean>
		</property>
	</bean>

	<bean id="resultWriter" class="org.springframework.batch.item.file.FlatFileItemWriter" scope="step">
		<property name="resource" value="file:data/RCV_TEMP.TXT" />
		<property name="lineAggregator">
			<bean class="org.springframework.batch.item.file.transform.DelimitedLineAggregator">
				<property name="delimiter" value=',' />
				<property name="fieldExtractor">
					<bean class="org.springframework.batch.item.file.transform.BeanWrapperFieldExtractor">
						<property name="names" value="id, sendFlg, updTs" />
					</bean>
				</property>
			</bean>
		</property>
	</bean>

	<bean id="resultReader" class="org.springframework.batch.item.file.FlatFileItemReader">
		<property name="resource" value="file:data/RCV_TEMP.TXT" />
		<property name="lineMapper">
			<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
				<!-- split it -->
				<property name="lineTokenizer">
					<bean
						class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
						<property name="names" value="id, sendFlg, updTs" />
					</bean>
				</property>
				<property name="fieldSetMapper">
					<!-- return back to reader, rather than a mapped object. -->
					<!-- map to an object -->
					<bean
						class="org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper">
						<property name="prototypeBeanName" value="outptData" />
					</bean>
				</property>
			</bean>
		</property>
	</bean>

	
	<bean id="updateWriter" class="org.mybatis.spring.batch.MyBatisBatchItemWriter" scope="step">
	
	<!--
	<bean id="updateWriter" class="jp.co.sysevo.batch.UpdateItemWriter" scope="step">
	-->
		<property name="sqlSessionFactory" ref="sqlSessionFactory" />
		<property name="statementId" value="updateTable"/>
	</bean>

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
	</bean>
</beans>
